#!/usr/bin/env python

import argparse
import json
import time

import spur

import beach


def main():
    _commands = [DeployCommand(), RegisterCommand(), DeregisterCommand()]
    
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()
    
    for command in _commands:
        subparser = subparsers.add_parser(command.name)
        subparser.set_defaults(func=command.execute)
        command.create_parser(subparser)
    
    args = parser.parse_args()
    args.func(args)
    
    return parser.parse_args()


class DeployCommand(object):
    name = "deploy"
    
    def create_parser(self, parser):
        parser.add_argument("app_path", metavar="app-path")
        _add_config_arg(parser)
        parser.add_argument("--param", "-p", action=KeyValueListAction)
    
    def execute(self, args):
        app_path = args.app_path
        config = _read_config(args)
        registry = _read_registry_arg(args)
        
        with beach.supervisors.stop_on_exit() as supervisor:
            with beach.layouts.TemporaryLayout() as layout:
                deployer = beach.Deployer(
                    supervisor=supervisor,
                    layout=layout,
                    registry=registry,
                )
        
                params = config.get("params", {})
                params.update(args.param)
                
                deployer.deploy(app_path, params=params)
                
                try:
                    while True:
                        time.sleep(0.1)
                except KeyboardInterrupt:
                    return


class RegisterCommand(object):
    name = "register"
    
    def create_parser(self, parser):
        parser.add_argument("name")
        _add_config_arg(parser)
        parser.add_argument("--provide", "-p", action=KeyValueListAction)
    
    def execute(self, args):
        registry = _read_registry_arg(args)
        registry.register(args.name, dict(args.provide))


class DeregisterCommand(object):
    name = "deregister"
    
    def create_parser(self, parser):
        parser.add_argument("name")
        _add_config_arg(parser)
        
    def execute(self, args):
        registry = _read_registry_arg(args)
        registry.deregister(args.name)


def _read_registry_arg(args):
    config = _read_config(args)
    registry_config = config.get("registry", None)
    if registry_config is None:
        return None
    else:
        return beach.registries.FileRegistry(spur.LocalShell(), registry_config["path"])


def _read_config(args):
    if args.config is None:
        return {}
    
    config_path = args.config
    
    with open(config_path) as config_file:
        return json.load(config_file)


def _add_config_arg(parser):
    parser.add_argument("--config", "-c")


class KeyValueListAction(argparse.Action):
    def __init__(self, *args, **kwargs):
        super(type(self), self).__init__(*args, default=[], **kwargs)
    
    def __call__(self, parser, namespace, values, option_string=None):
        if not values:
            return
        
        if getattr(namespace, self.dest, None) is None:
            setattr(namespace, self.dest, [])
        
        key_value_pair = values.split("=", 1)
        
        getattr(namespace, self.dest).append(tuple(key_value_pair))


if __name__ == "__main__":
    main()
